@if (customer != null)
{
    <EditForm Model="customer" class="form-line" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="customer.CustomerName" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="address">Address</label>
            <InputText class="form-control" id="address" @bind-Value="customer.CustomerAddress"></InputText>
        </div>
        <div class="form-group">
            <label for="city">City</label>
            <InputText class="form-control" id="city" @bind-Value="customer.CustomerCity"></InputText>
        </div>
        <div class="form-group">
            <label for="province">Province</label>
            <InputText class="form-control" id="province" @bind-Value="customer.CustomerStateProvince"></InputText>
        </div>
        <div class="form-group">
            <label for="country">Country</label>
            <InputText class="form-control" id="country" @bind-Value="customer.CustomerCountry"></InputText>
        </div>

        <button type="submit" class="btn btn-primary">Place Order</button>
    </EditForm>

}

@code {
    private CustomerViewModel customer;
    [Parameter]
    public EventCallback<CustomerViewModel> OnCustomerInfoSubmitted { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        customer = new CustomerViewModel();
    }
    private void HandleValidSubmit()
    {
        OnCustomerInfoSubmitted.InvokeAsync(customer);
    }

}